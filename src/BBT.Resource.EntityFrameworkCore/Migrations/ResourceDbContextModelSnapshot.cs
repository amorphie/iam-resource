// <auto-generated />
using System;
using BBT.Prism.EntityFrameworkCore;
using BBT.Resource.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BBT.Resource.Migrations
{
    [DbContext(typeof(ResourceDbContext))]
    partial class ResourceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Prism_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql)
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BBT.Resource.Privileges.Privilege", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Privileges", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Resources.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("Url", "Type")
                        .IsUnique();

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("ResourceGroups", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceGroupTranslation", b =>
                {
                    b.Property<string>("Language")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Language", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ResourceGroupTranslations", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourcePrivilege", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<Guid>("PrivilegeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("ResourceId", "Priority");

                    b.HasIndex("PrivilegeId");

                    b.ToTable("ResourcePrivileges", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceRule", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("ResourceId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("ResourceRules", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceTranslation", b =>
                {
                    b.Property<string>("Language")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Language", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceTranslations", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefinitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("Key", "ClientId")
                        .IsUnique();

                    b.ToTable("RoleDefinitions", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleDefinitionTranslation", b =>
                {
                    b.Property<string>("Language")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("DefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Language", "DefinitionId");

                    b.HasIndex("DefinitionId");

                    b.ToTable("RoleDefinitionTranslations", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleGroupRole", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("GroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupRoles", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleGroupTranslation", b =>
                {
                    b.Property<string>("Language")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Language", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("RoleGroupTranslations", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleTranslation", b =>
                {
                    b.Property<string>("Language")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Language", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleTranslations", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Scopes", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Roles.ScopeTranslation", b =>
                {
                    b.Property<string>("Language")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Language", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("ScopeTranslations", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Rules.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByBehalfOf")
                        .HasColumnType("uuid");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ModifiedAt");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedBy");

                    b.Property<Guid?>("ModifiedByBehalfOf")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifiedByBehalfOf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.ToTable("Rules", (string)null);
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceGroupTranslation", b =>
                {
                    b.HasOne("BBT.Resource.Resources.ResourceGroup", null)
                        .WithMany("Translations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourcePrivilege", b =>
                {
                    b.HasOne("BBT.Resource.Privileges.Privilege", null)
                        .WithMany()
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBT.Resource.Resources.Resource", null)
                        .WithMany("Privileges")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceRule", b =>
                {
                    b.HasOne("BBT.Resource.Resources.Resource", null)
                        .WithMany("Rules")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBT.Resource.Rules.Rule", null)
                        .WithMany()
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceTranslation", b =>
                {
                    b.HasOne("BBT.Resource.Resources.Resource", null)
                        .WithMany("Translations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Roles.Role", b =>
                {
                    b.HasOne("BBT.Resource.Roles.RoleDefinition", null)
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleDefinitionTranslation", b =>
                {
                    b.HasOne("BBT.Resource.Roles.RoleDefinition", null)
                        .WithMany("Translations")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleGroupRole", b =>
                {
                    b.HasOne("BBT.Resource.Roles.RoleGroup", null)
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBT.Resource.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleGroupTranslation", b =>
                {
                    b.HasOne("BBT.Resource.Roles.RoleGroup", null)
                        .WithMany("Translations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleTranslation", b =>
                {
                    b.HasOne("BBT.Resource.Roles.Role", null)
                        .WithMany("Translations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Roles.Scope", b =>
                {
                    b.HasOne("BBT.Resource.Roles.RoleGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Roles.ScopeTranslation", b =>
                {
                    b.HasOne("BBT.Resource.Roles.Scope", null)
                        .WithMany("Translations")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBT.Resource.Resources.Resource", b =>
                {
                    b.Navigation("Privileges");

                    b.Navigation("Rules");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("BBT.Resource.Resources.ResourceGroup", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("BBT.Resource.Roles.Role", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleDefinition", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("BBT.Resource.Roles.RoleGroup", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("BBT.Resource.Roles.Scope", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
